// Copyright (c) 2019 FRC Team 3512. All Rights Reserved.

#pragma once
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <map>
#include <string>
#include <vector>

#include <opencv2/core/core.hpp>
#include <opencv2/features2d.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/objdetect/objdetect.hpp>
#include <vision/VisionPipeline.h>

namespace grip {

/**
 * GripPipeline class.
 *
 * An OpenCV pipeline generated by GRIP.
 */
class GripPipeline : public frc::VisionPipeline {
public:
    GripPipeline() = default;
    void Process(cv::Mat& source0) override;
    cv::Mat* GetHsvThresholdOutput();
    std::vector<std::vector<cv::Point> >* GetFindContoursOutput();
    std::vector<std::vector<cv::Point> >* GetFilterContoursOutput();
    std::vector<std::vector<cv::Point> >* GetConvexHullsOutput();
    std::vector<std::vector<cv::Point> >* GetPolyDPOutput();

private:
    cv::Mat hsvThresholdOutput;
    std::vector<std::vector<cv::Point> > findContoursOutput;
    std::vector<std::vector<cv::Point> > filterContoursOutput;
    std::vector<std::vector<cv::Point> > convexHullsOutput;
    std::vector<std::vector<cv::Point> > polyDPOutput;
    void hsvThreshold(cv::Mat&, double[], double[], double[], cv::Mat&);
    void findContours(cv::Mat&, bool, std::vector<std::vector<cv::Point> >&);
    void filterContours(std::vector<std::vector<cv::Point> >&, double, double,
                        double, double, double, double, double[], double,
                        double, double, double,
                        std::vector<std::vector<cv::Point> >&);
    void convexHulls(std::vector<std::vector<cv::Point> >&,
                     std::vector<std::vector<cv::Point> >&);
    void polyDP(std::vector<std::vector<cv::Point> >&, double epsilon,
                bool closed, std::vector<std::vector<cv::Point> >& out);
};

}  // namespace grip
